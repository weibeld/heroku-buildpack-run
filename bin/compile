#!/usr/bin/env bash
#
# This buildpacks allows to run custom commands on the build dyno.
#
# Example:
#   heroku config:set BUILDPACK_RUN='./myexec-1:ls -l:bin/myexec-2 foo bar'
#   git push heroku master
#
# The above example runs the following three commands during the build:
#   1. ./myexec-1
#   2. ls -l
#   3. bin/myexec-2 foo bar
#
# Notes:
#   - If BUILDPACK_RUN is unset, then './buildpack-run.sh' is used by default
#   - All commands must be executable (i.e. the exec flag must be set)
#   - If any command exits with a non-zero code, the build is aborted
#
# ---
#
# The 'compile' script is executed by the slug compiler with three arguments:
#   $1: build_dir, location of your app directory on the build dyno
#   $2: cache_dir, directory on the build dyno that persists between builds
#   $3: env_dir, directory holding all the app's config vars as files
#
# More information here: https://devcenter.heroku.com/articles/buildpack-api
#------------------------------------------------------------------------------#

# Indent stdin
i() { sed 's/^/       /'; }
a() { sed 's/^/-----> /'; }
I() { sed "s/^/$(printf '\033')[31m       /;s/$/$(printf '\033')[0m/"; }
A() { sed "s/^/$(printf '\033')[31m-----> /;s/$/$(printf '\033')[0m/"; }

# These environment variables can be accessed from the user-supplied commands
export BUILD_DIR=$1
export CACHE_DIR=$2
export ENV_DIR=$3

cd "$BUILD_DIR"

# Load Heroku config environment to runtime environment
# https://devcenter.heroku.com/articles/buildpack-api#bin-compile
load_env_dir() {
  acceptlist_regex=${2:-''}
  denylist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$ENV_DIR" ]; then
    for e in $(ls $ENV_DIR); do
      echo "$e" | grep -E "$acceptlist_regex" | grep -qvE "$denylist_regex" &&
      export "$e=$(cat $ENV_DIR/$e)"
      :
    done
  fi
}

# Load Heroku config to runtime environment if BUILDPACK_HEROKU_ENV exists
if [[ -f "$ENV_DIR/BUILDPACK_HEROKU_ENV" ]]; then
  load_env_dir
  echo "Loading Heroku config to runtime" | A
fi

# Extract commands from BUILDPACK_RUN config variable
if [[ -f "$ENV_DIR/BUILDPACK_RUN" ]]; then
  COMMANDS=$(cat "$ENV_DIR/BUILDPACK_RUN")
elif [[ -f ./buildpack-run.sh ]]; then
  COMMANDS=./buildpack-run.sh
else
  echo "Error: can't apply buildpack." | A
  echo "You must specify one ore more colon-delimited commands in" | I
  echo "BUILDPACK_RUN or use the default file ./buildpack-run.sh." | I
  echo "See https://github.com/weibeld/heroku-buildpack-run#configure." | I
  echo
  exit 1
fi
IFS=':' COMMANDS=($COMMANDS)

# Run commands
for c in ${COMMANDS[@]}; do
  # Test if local file is executable (breaking change from previous version)
  file=$(echo "$c" | cut -f 1 -d " ")
  if [[ -f "$file" && ! -x "$file" ]]; then
    echo "Error: $file is not executable."  | A
    echo "Make it executable by running 'chmod +x $file'" | I
    echo "on your local machine, then commit and push as usual." | I
    exit 1
  fi
  echo "Running: $c" | a
  eval "$c"
  EXIT_CODE=$?
  if [[ "$EXIT_CODE" != 0 ]]; then
    echo "Aborting build because '$c' exited with a non-zero code ($EXIT_CODE)" | A
    exit 1
  fi
done

exit 0
